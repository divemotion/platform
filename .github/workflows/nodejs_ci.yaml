name: Node.js CI
on:
  push:
    branches-ignore:
      - dev
      - master

env:
  NODE_VERSION_X: "14.x"
  HASURA_VERSION: "v2.7.0"

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION_X }}
      - name: Get node version
        run: |
          echo "NODE_VERSION=$(node --version)" >> $GITHUB_ENV
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v3
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Cache node_modules
        uses: actions/cache@v3
        id: node_modules-cache
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-test-node-${{ env.NODE_VERSION }}-modules-${{ hashFiles('**/yarn.lock') }}
      - name: Install dependencies
        run: yarn install --no-progress --non-interactive --prefer-offline
  test:
    name: Test
    runs-on: ubuntu-latest
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres:12
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgrespassword
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      graphql-engine:
        image: hasura/graphql-engine:v2.7.0
        ports:
          - 5001:5001
        env:
          HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:postgrespassword@postgres:5432/postgres
          DEFAULT_DATABASE_URL: postgres://postgres:postgrespassword@postgres:5432/postgres
          HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://postgres:postgrespassword@postgres:5432/postgres
          PG_DATABASE_URL: postgres://postgres:postgrespassword@postgres:5432/postgres
          HASURA_GRAPHQL_ENABLE_CONSOLE: "false" # set to "false" to disable console
          HASURA_ACTION_BASE_URL: "http://localhost:8888"
          GRAPHQL_URL: "http://localhost:5001/v1/graphql"
          HASURA_GRAPHQL_SERVER_PORT: 5001
          HASURA_GRAPHQL_ADMIN_SECRET: myadminsecretkey
          HASURA_ADMIN_SECRET: myadminsecretkey
    steps:
      - name: Hasura Health Check
        run: sleep 10 && curl -f http://localhost:5001/healthz

      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION_X }}
      - name: Get node version
        run: |
          echo "NODE_VERSION=$(node --version)" >> $GITHUB_ENV
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v3
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Cache node_modules
        uses: actions/cache@v3
        id: node_modules-cache
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-test-node-${{ env.NODE_VERSION }}-modules-${{ hashFiles('**/yarn.lock') }}
      - name: Cache build gql SDK
        uses: actions/cache@v3
        id: build-cache
        with:
          path: "**/graphql/**/__generated__"
          key: ${{ runner.os }}-build-${{ github.sha }}
      - name: Install dependencies
        run: yarn install --no-progress --non-interactive --prefer-offline
      - run: sudo chown -R $USER:$USER ${{ github.workspace }}
      - name: install hasura cli
        run: curl -L https://github.com/hasura/graphql-engine/raw/stable/cli/get.sh | VERSION=${{ env.HASURA_VERSION }} bash
      - name: Hasura migrate
        run: hasura --project ./apps/hasura migrate apply --endpoint http://localhost:5001 --all-databases --admin-secret myadminsecretkey --skip-update-check --log-level DEBUG
      - name: Hasura metadata
        run: hasura --project ./apps/hasura metadata apply --endpoint http://localhost:5001 --admin-secret myadminsecretkey --skip-update-check --log-level DEBUG
      - name: Hasura reload
        run: hasura --project ./apps/hasura metadata reload --endpoint http://localhost:5001 --admin-secret myadminsecretkey --skip-update-check --log-level DEBUG
      - name: hasura metadata ic list
        run: hasura metadata ic list --project ./apps/hasura --endpoint http://localhost:5001 --admin-secret myadminsecretkey --skip-update-check --log-level DEBUG
      - name: curl
        run: curl http://localhost:5001/healthz
      - name: Generate SDK
        run: yarn generate-test
        env:
          GRAPHQL_SCHEMA_URL: "http://localhost:5001/v1/graphql"
          HASURA_ADMIN_SECRET: myadminsecretkey
      - name: build functions
        run: yarn workspace functions build
      - name: Hasura Test
        run: yarn workspace functions start & yarn workspace hasura test
        env:
          POSTGRES_CONNECTION: postgres://postgres:postgrespassword@localhost:5432/postgres
          GRAPHQL_SCHEMA_URL: "http://localhost:5001/v1/graphql"
          HASURA_ADMIN_SECRET: myadminsecretkey
  lint:
    name: Lint Source
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION_X }}
      - name: Get node version
        run: |
          echo "NODE_VERSION=$(node --version)" >> $GITHUB_ENV
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v3
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Cache node_modules
        uses: actions/cache@v3
        id: node_modules-cache
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-test-node-${{ env.NODE_VERSION }}-modules-${{ hashFiles('**/yarn.lock') }}
      - name: Install dependencies
        run: yarn install --no-progress --non-interactive --prefer-offline
      - name: Lint
        run: yarn lint
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION_X }}
      - name: Get node version
        run: |
          echo "NODE_VERSION=$(node --version)" >> $GITHUB_ENV
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v3
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Cache node_modules
        uses: actions/cache@v3
        id: node_modules-cache
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-test-node-${{ env.NODE_VERSION }}-modules-${{ hashFiles('**/yarn.lock') }}
      - name: Cache build Web Build
        uses: actions/cache@v3
        with:
          # See here for caching with `yarn` https://github.com/actions/cache/blob/main/examples.md#node---yarn or you can leverage caching with actions/setup-node https://github.com/actions/setup-node
          path: |
            ~/.npm
            ${{ github.workspace }}/.next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-
      - name: Install dependencies
        run: yarn install --no-progress --non-interactive --prefer-offline
      - name: build
        run: yarn build
